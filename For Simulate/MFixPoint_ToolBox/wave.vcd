$date
	Thu Apr 02 22:53:39 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module MFP_Adder_Arr $end
$var wire 64 ! In1Arr [63:0] $end
$var wire 64 " In2Arr [63:0] $end
$var wire 64 # OutArr [63:0] $end
$scope begin oparr[0] $end
$scope module a0 $end
$var wire 16 $ In1 [15:0] $end
$var wire 16 % In2 [15:0] $end
$var wire 1 & IsSameSign $end
$var wire 1 ' IsSignChanged $end
$var wire 16 ( Out [15:0] $end
$var wire 16 ) TestAdd [15:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin oparr[1] $end
$scope module a0 $end
$var wire 16 * In1 [15:0] $end
$var wire 16 + In2 [15:0] $end
$var wire 1 , IsSameSign $end
$var wire 1 - IsSignChanged $end
$var wire 16 . Out [15:0] $end
$var wire 16 / TestAdd [15:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin oparr[2] $end
$scope module a0 $end
$var wire 16 0 In1 [15:0] $end
$var wire 16 1 In2 [15:0] $end
$var wire 1 2 IsSameSign $end
$var wire 1 3 IsSignChanged $end
$var wire 16 4 Out [15:0] $end
$var wire 16 5 TestAdd [15:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin oparr[3] $end
$scope module a0 $end
$var wire 16 6 In1 [15:0] $end
$var wire 16 7 In2 [15:0] $end
$var wire 1 8 IsSameSign $end
$var wire 1 9 IsSignChanged $end
$var wire 16 : Out [15:0] $end
$var wire 16 ; TestAdd [15:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module MFP_MAC_Seq $end
$var wire 8 < In1 [7:0] $end
$var wire 8 = In2 [7:0] $end
$var wire 15 > acc_sum_pre [14:0] $end
$var wire 15 ? acc_sum_rounded [14:0] $end
$var wire 1 @ aclr $end
$var wire 1 A clock $end
$var wire 15 B product [14:0] $end
$var wire 15 C product_rounded [14:0] $end
$var reg 15 D acc_sum [14:0] $end
$scope module m1 $end
$var wire 8 E In1 [7:0] $end
$var wire 8 F In2 [7:0] $end
$var wire 15 G Out [14:0] $end
$var wire 15 H Out_ [14:0] $end
$scope module roun $end
$var wire 15 I in [14:0] $end
$var wire 15 J out [14:0] $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$var wire 8 K In1_s [7:0] $end
$var wire 8 L In2_s [7:0] $end
$var wire 15 M Out_s [14:0] $end
$upscope $end
$upscope $end
$scope module round_prod $end
$var wire 15 N in [14:0] $end
$var wire 15 O out [14:0] $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$scope module aS $end
$var wire 15 P In1 [14:0] $end
$var wire 15 Q In2 [14:0] $end
$var wire 1 R IsSameSign $end
$var wire 1 S IsSignChanged $end
$var wire 15 T Out [14:0] $end
$var wire 15 U TestAdd [14:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$scope module round_acc $end
$var wire 15 V in [14:0] $end
$var wire 15 W out [14:0] $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module MFP_MAC_symmetric_par $end
$var wire 32 X Coeff [31:0] $end
$var wire 56 Y In1Arr [55:0] $end
$var wire 36 Z In1ArrFold [35:0] $end
$var wire 15 [ acc_sum_rounded [14:0] $end
$var wire 1 \ clk $end
$var wire 1 ] en $end
$scope module MACpH $end
$var wire 36 ^ In1Arr [35:0] $end
$var wire 32 _ In2Arr [31:0] $end
$var wire 15 ` acc_sum_rounded [14:0] $end
$var wire 1 \ clk $end
$var wire 1 ] en $end
$var wire 60 a productArr_rounded [59:0] $end
$var wire 15 b productArr_roundedSum [14:0] $end
$scope module AMFP $end
$var wire 36 c In1Arr [35:0] $end
$var wire 32 d In2Arr [31:0] $end
$var wire 60 e OutArr [59:0] $end
$scope begin oparr[0] $end
$scope module m0 $end
$var wire 9 f In1 [8:0] $end
$var wire 8 g In2 [7:0] $end
$var wire 15 h Out [14:0] $end
$var wire 16 i Out_ [15:0] $end
$scope module roun $end
$var wire 16 j in [15:0] $end
$var wire 15 k out [14:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$var wire 9 l In1_s [8:0] $end
$var wire 8 m In2_s [7:0] $end
$var wire 16 n Out_s [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin oparr[1] $end
$scope module m0 $end
$var wire 9 o In1 [8:0] $end
$var wire 8 p In2 [7:0] $end
$var wire 15 q Out [14:0] $end
$var wire 16 r Out_ [15:0] $end
$scope module roun $end
$var wire 16 s in [15:0] $end
$var wire 15 t out [14:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$var wire 9 u In1_s [8:0] $end
$var wire 8 v In2_s [7:0] $end
$var wire 16 w Out_s [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin oparr[2] $end
$scope module m0 $end
$var wire 9 x In1 [8:0] $end
$var wire 8 y In2 [7:0] $end
$var wire 15 z Out [14:0] $end
$var wire 16 { Out_ [15:0] $end
$scope module roun $end
$var wire 16 | in [15:0] $end
$var wire 15 } out [14:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$var wire 9 ~ In1_s [8:0] $end
$var wire 8 !" In2_s [7:0] $end
$var wire 16 "" Out_s [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin oparr[3] $end
$scope module m0 $end
$var wire 9 #" In1 [8:0] $end
$var wire 8 $" In2 [7:0] $end
$var wire 15 %" Out [14:0] $end
$var wire 16 &" Out_ [15:0] $end
$scope module roun $end
$var wire 16 '" in [15:0] $end
$var wire 15 (" out [14:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$var wire 9 )" In1_s [8:0] $end
$var wire 8 *" In2_s [7:0] $end
$var wire 16 +" Out_s [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ATFP $end
$var wire 60 ," DIn [59:0] $end
$var wire 15 -" Sum [14:0] $end
$var wire 15 ." Sum_ [14:0] $end
$var wire 1 \ clk $end
$var wire 1 ] en $end
$var wire 15 /" subLevelSum1 [14:0] $end
$var wire 15 0" subLevelSum2 [14:0] $end
$scope module aS $end
$var wire 15 1" In1 [14:0] $end
$var wire 15 2" In2 [14:0] $end
$var wire 1 3" IsSameSign $end
$var wire 1 4" IsSignChanged $end
$var wire 15 5" Out [14:0] $end
$var wire 15 6" TestAdd [14:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$scope module RoW $end
$var wire 1 \ clk $end
$var wire 1 ] en $end
$var wire 15 7" in [14:0] $end
$var wire 15 8" out [14:0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$scope module ATI1 $end
$var wire 30 9" DIn [29:0] $end
$var wire 15 :" Sum [14:0] $end
$var wire 15 ;" Sum_ [14:0] $end
$var wire 1 \ clk $end
$var wire 1 ] en $end
$var wire 15 <" subLevelSum1 [14:0] $end
$var wire 15 =" subLevelSum2 [14:0] $end
$scope module aS $end
$var wire 15 >" In1 [14:0] $end
$var wire 15 ?" In2 [14:0] $end
$var wire 1 @" IsSameSign $end
$var wire 1 A" IsSignChanged $end
$var wire 15 B" Out [14:0] $end
$var wire 15 C" TestAdd [14:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$scope module RoW $end
$var wire 1 \ clk $end
$var wire 1 ] en $end
$var wire 15 D" in [14:0] $end
$var wire 15 E" out [14:0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk4 $end
$scope module ATI1 $end
$var wire 30 F" DIn [29:0] $end
$var wire 15 G" Sum [14:0] $end
$var wire 15 H" Sum_ [14:0] $end
$var wire 1 \ clk $end
$var wire 1 ] en $end
$var wire 15 I" subLevelSum1 [14:0] $end
$var wire 15 J" subLevelSum2 [14:0] $end
$scope module aS $end
$var wire 15 K" In1 [14:0] $end
$var wire 15 L" In2 [14:0] $end
$var wire 1 M" IsSameSign $end
$var wire 1 N" IsSignChanged $end
$var wire 15 O" Out [14:0] $end
$var wire 15 P" TestAdd [14:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$scope module RoW $end
$var wire 1 \ clk $end
$var wire 1 ] en $end
$var wire 15 Q" in [14:0] $end
$var wire 15 R" out [14:0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module round_acc $end
$var wire 15 S" in [14:0] $end
$var wire 15 T" out [14:0] $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$upscope $end
$scope begin foldLoop[0] $end
$scope module aS $end
$var wire 8 U" In1 [7:0] $end
$var wire 8 V" In2 [7:0] $end
$var wire 1 W" IsSameSign $end
$var wire 1 X" IsSignChanged $end
$var wire 9 Y" Out [8:0] $end
$var wire 9 Z" TestAdd [8:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin foldLoop[1] $end
$scope module aS $end
$var wire 8 [" In1 [7:0] $end
$var wire 8 \" In2 [7:0] $end
$var wire 1 ]" IsSameSign $end
$var wire 1 ^" IsSignChanged $end
$var wire 9 _" Out [8:0] $end
$var wire 9 `" TestAdd [8:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin foldLoop[2] $end
$scope module aS $end
$var wire 8 a" In1 [7:0] $end
$var wire 8 b" In2 [7:0] $end
$var wire 1 c" IsSameSign $end
$var wire 1 d" IsSignChanged $end
$var wire 9 e" Out [8:0] $end
$var wire 9 f" TestAdd [8:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module TB1 $end
$var wire 1 g" RES $end
$var wire 1 h" ZZZ $end
$var wire 1 i" clk_ $end
$var wire 1 j" en_ $end
$scope module Mul $end
$var wire 8 k" In1 [7:0] $end
$var wire 8 l" In2 [7:0] $end
$var wire 8 m" Out [7:0] $end
$var wire 15 n" Out_ [14:0] $end
$scope module roun $end
$var wire 15 o" in [14:0] $end
$var wire 8 p" out [7:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$var wire 8 q" In1_s [7:0] $end
$var wire 8 r" In2_s [7:0] $end
$var wire 15 s" Out_s [14:0] $end
$upscope $end
$upscope $end
$scope module Muluns $end
$var wire 8 t" In1 [7:0] $end
$var wire 8 u" In2 [7:0] $end
$var wire 8 v" Out [7:0] $end
$var wire 16 w" Out_ [15:0] $end
$scope module roun $end
$var wire 16 x" in [15:0] $end
$var wire 8 y" out [7:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope module Adder $end
$var wire 8 z" In1 [7:0] $end
$var wire 8 {" In2 [7:0] $end
$var wire 1 |" IsSameSign $end
$var wire 1 }" IsSignChanged $end
$var wire 8 ~" Out [7:0] $end
$var wire 8 !# TestAdd [7:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$scope module AdderuS $end
$var wire 8 "# In1 [7:0] $end
$var wire 8 ## In2 [7:0] $end
$var wire 1 $# IsSameSign $end
$var wire 1 %# IsSignChanged $end
$var wire 8 &# Out [7:0] $end
$var wire 8 '# TestAdd [7:0] $end
$scope begin genblk1 $end
$var wire 8 (# In2_ [7:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$scope module MAC $end
$var wire 16 )# In1Arr [15:0] $end
$var wire 16 *# In2Arr [15:0] $end
$var wire 8 +# acc_sum_rounded [7:0] $end
$var wire 1 i" clk $end
$var wire 1 j" en $end
$var wire 30 ,# productArr_rounded [29:0] $end
$var wire 15 -# productArr_roundedSum [14:0] $end
$scope module AMFP $end
$var wire 16 .# In1Arr [15:0] $end
$var wire 16 /# In2Arr [15:0] $end
$var wire 30 0# OutArr [29:0] $end
$scope begin oparr[0] $end
$scope module m0 $end
$var wire 8 1# In1 [7:0] $end
$var wire 8 2# In2 [7:0] $end
$var wire 15 3# Out [14:0] $end
$var wire 15 4# Out_ [14:0] $end
$scope module roun $end
$var wire 15 5# in [14:0] $end
$var wire 15 6# out [14:0] $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$var wire 8 7# In1_s [7:0] $end
$var wire 8 8# In2_s [7:0] $end
$var wire 15 9# Out_s [14:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin oparr[1] $end
$scope module m0 $end
$var wire 8 :# In1 [7:0] $end
$var wire 8 ;# In2 [7:0] $end
$var wire 15 <# Out [14:0] $end
$var wire 15 =# Out_ [14:0] $end
$scope module roun $end
$var wire 15 ># in [14:0] $end
$var wire 15 ?# out [14:0] $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$var wire 8 @# In1_s [7:0] $end
$var wire 8 A# In2_s [7:0] $end
$var wire 15 B# Out_s [14:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ATFP $end
$var wire 30 C# DIn [29:0] $end
$var wire 15 D# Sum [14:0] $end
$var wire 15 E# Sum_ [14:0] $end
$var wire 1 i" clk $end
$var wire 1 j" en $end
$var wire 15 F# subLevelSum1 [14:0] $end
$var wire 15 G# subLevelSum2 [14:0] $end
$scope module aS $end
$var wire 15 H# In1 [14:0] $end
$var wire 15 I# In2 [14:0] $end
$var wire 1 J# IsSameSign $end
$var wire 1 K# IsSignChanged $end
$var wire 15 L# Out [14:0] $end
$var wire 15 M# TestAdd [14:0] $end
$scope begin genblk4 $end
$scope begin genblk5 $end
$upscope $end
$upscope $end
$upscope $end
$scope module RoW $end
$var wire 1 i" clk $end
$var wire 1 j" en $end
$var wire 15 N# in [14:0] $end
$var wire 15 O# out [14:0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope module round_acc $end
$var wire 15 P# in [14:0] $end
$var wire 8 Q# out [7:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$scope module MACunS $end
$var wire 16 R# In1Arr [15:0] $end
$var wire 16 S# In2Arr [15:0] $end
$var wire 8 T# acc_sum_rounded [7:0] $end
$var wire 1 i" clk $end
$var wire 1 j" en $end
$var wire 32 U# productArr_rounded [31:0] $end
$var wire 16 V# productArr_roundedSum [15:0] $end
$scope module AMFP $end
$var wire 16 W# In1Arr [15:0] $end
$var wire 16 X# In2Arr [15:0] $end
$var wire 32 Y# OutArr [31:0] $end
$scope begin oparr[0] $end
$scope module m0 $end
$var wire 8 Z# In1 [7:0] $end
$var wire 8 [# In2 [7:0] $end
$var wire 16 \# Out [15:0] $end
$var wire 16 ]# Out_ [15:0] $end
$scope module roun $end
$var wire 16 ^# in [15:0] $end
$var wire 16 _# out [15:0] $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin oparr[1] $end
$scope module m0 $end
$var wire 8 `# In1 [7:0] $end
$var wire 8 a# In2 [7:0] $end
$var wire 16 b# Out [15:0] $end
$var wire 16 c# Out_ [15:0] $end
$scope module roun $end
$var wire 16 d# in [15:0] $end
$var wire 16 e# out [15:0] $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ATFP $end
$var wire 32 f# DIn [31:0] $end
$var wire 16 g# Sum [15:0] $end
$var wire 16 h# Sum_ [15:0] $end
$var wire 1 i" clk $end
$var wire 1 j" en $end
$var wire 16 i# subLevelSum1 [15:0] $end
$var wire 16 j# subLevelSum2 [15:0] $end
$scope module aS $end
$var wire 16 k# In1 [15:0] $end
$var wire 16 l# In2 [15:0] $end
$var wire 1 m# IsSameSign $end
$var wire 1 n# IsSignChanged $end
$var wire 16 o# Out [15:0] $end
$var wire 16 p# TestAdd [15:0] $end
$scope begin genblk1 $end
$var wire 16 q# In2_ [15:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$scope module RoW $end
$var wire 1 i" clk $end
$var wire 1 j" en $end
$var wire 16 r# in [15:0] $end
$var wire 16 s# out [15:0] $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope module round_acc $end
$var wire 16 t# in [15:0] $end
$var wire 8 u# out [7:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1111111 u#
b111111100000000 t#
b111111100000000 s#
b111111100000000 r#
b11111110000000 q#
b111111100000000 p#
b111111100000000 o#
0n#
1m#
b11111110000000 l#
b11111110000000 k#
b11111110000000 j#
b11111110000000 i#
b111111100000000 h#
b111111100000000 g#
b111111100000000011111110000000 f#
b11111110000000 e#
b11111110000000 d#
b11111110000000 c#
b11111110000000 b#
b10000000 a#
b1111111 `#
b11111110000000 _#
b11111110000000 ^#
b11111110000000 ]#
b11111110000000 \#
b10000000 [#
b1111111 Z#
b111111100000000011111110000000 Y#
b1000000010000000 X#
b111111101111111 W#
b111111100000000 V#
b111111100000000011111110000000 U#
b1111111 T#
b1000000010000000 S#
b111111101111111 R#
b1111111 Q#
b11111110000000 P#
b11111110000000 O#
b11111110000000 N#
b11111110000000 M#
b11111110000000 L#
0K#
1J#
b1111111000000 I#
b1111111000000 H#
b1111111000000 G#
b1111111000000 F#
b11111110000000 E#
b11111110000000 D#
b1111111000000001111111000000 C#
b1111111000000 B#
b1000000 A#
b1111111 @#
b1111111000000 ?#
b1111111000000 >#
b1111111000000 =#
b1111111000000 <#
b1000000 ;#
b1111111 :#
b1111111000000 9#
b1000000 8#
b1111111 7#
b1111111000000 6#
b1111111000000 5#
b1111111000000 4#
b1111111000000 3#
b1000000 2#
b1111111 1#
b1111111000000001111111000000 0#
b100000001000000 /#
b111111101111111 .#
b11111110000000 -#
b1111111000000001111111000000 ,#
b1111111 +#
b100000001000000 *#
b111111101111111 )#
b1 (#
b0 '#
b0 &#
1%#
0$#
b1 ##
b11111111 "#
b0 !#
b0 ~"
0}"
0|"
b10000001 {"
b1111111 z"
b1000000 y"
b100000000000000 x"
b100000000000000 w"
b1000000 v"
b10000000 u"
b10000000 t"
b100000000000000 s"
b10000000 r"
b10000000 q"
b10000000 p"
b100000000000000 o"
b100000000000000 n"
b10000000 m"
b10000000 l"
b10000000 k"
zj"
zi"
0h"
1g"
bx f"
bx e"
xd"
xc"
bz b"
bz a"
bx `"
bx _"
x^"
x]"
bz \"
bz ["
bx Z"
bx Y"
xX"
xW"
bz V"
bz U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
xN"
xM"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
xA"
x@"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
x4"
x3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bz *"
b0zzzzzzzz )"
bx ("
bx '"
bx &"
bx %"
bz $"
b0zzzzzzzz #"
bx ""
bz !"
bx ~
bx }
bx |
bx {
bx z
bz y
bx x
bx w
bz v
bx u
bx t
bx s
bx r
bx q
bz p
bx o
bx n
bz m
bx l
bx k
bx j
bx i
bx h
bz g
bx f
bx e
bz d
b0zzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxx c
bx b
bx a
bx `
bz _
b0zzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxx ^
z]
z\
bx [
b0zzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxx Z
bz Y
bz X
bx W
bx V
bx U
bx T
xS
xR
bx Q
bx P
bx O
bx N
bx M
bz L
bz K
bx J
bx I
bx H
bx G
bz F
bz E
bx D
bx C
bx B
zA
z@
bx ?
bx >
bz =
bz <
bx ;
bx :
x9
x8
bx 7
bx 6
bx 5
bx 4
x3
x2
bx 1
bx 0
bx /
bx .
x-
x,
bx +
bx *
bx )
bx (
x'
x&
bx %
bx $
bx #
bz "
bz !
$end
#1024
